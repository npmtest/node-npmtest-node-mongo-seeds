{"/home/travis/build/npmtest/node-npmtest-node-mongo-seeds/test.js":"/* istanbul instrument in package npmtest_node_mongo_seeds */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mongo-seeds/lib.npmtest_node_mongo_seeds.js":"/* istanbul instrument in package npmtest_node_mongo_seeds */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_mongo_seeds = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_mongo_seeds = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mongo-seeds/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-mongo-seeds && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_mongo_seeds */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_mongo_seeds\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_mongo_seeds.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_mongo_seeds.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_mongo_seeds.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_mongo_seeds.__dirname + '/lib.npmtest_node_mongo_seeds.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mongo-seeds/node_modules/node-mongo-seeds/lib/seed.js":"/**\n * This script inserts into mongo the contents of all the .json files in the /seeds directory.\n *\n * The name of the file is the collection that the contents of that file will be inserted into.\n *      Example: This script will insert all the records in cohort.json into the collection \"cohort\"\n *\n * Usage: $ node seed\n *\n * @author Tom Caflisch\n */\n\nvar Q       = require('q');\nvar mongo   = require('mongodb').MongoClient;\nvar config  = require(process.cwd() + \"/seed.json\");\nvar dir     = process.cwd()+'/seeds';\nvar fs      = require('fs'); // Used to get all the files in a directory\nvar util    = require('util');\nvar _       = require('lodash');\nvar errno   = require('errno');\nvar path    = require('path');\nvar json2mongo = require('json2mongo');\n\n/**\n * Reads the .json files from the ./seeds folder and inserts them into mongo\n */\nmodule.exports.seed = function() {\n\n  var listOfFiles = null;\n\n  load_files().then(function(list) {\n    listOfFiles = list;\n    return getConnection();\n  }).then(function(db) {\n    return seed_db(db, listOfFiles);\n  }).then(function () {\n    console.log('----------------------');\n    console.log('All done. Go play!');\n  }).fail(function(err) {\n    console.log('err = ', err);\n  }).done();\n}\n\n\n/*************************\n * Private\n ************************/\n\n\n/**\n * Loads all the json files from the ./seeds folder\n */\nfunction load_files() {\n\n  return Q.promise(function(resolve, reject, notify) {\n\n    // Read all the files in the ./seeds folder\n    fs.readdir(dir, function(err, files) {\n\n      if(err || _.isUndefined(files)) {\n        return reject('Error reading /seeds folder');\n      } else {\n        // Filter out everything except the .json files\n        files = files.filter(function(file) {\n          return path.extname(file) === '.json';\n        });\n\n        return resolve(files);\n      }\n    });\n  });\n}\n\n\n/**\n * Loops through all the .json files in ./seeds and removes all the records\n *\n * @param db    - The mongo object to run queries against\n * @param list  - An array of all the .json files from the seeds folder\n */\nfunction seed_db(db, list) {\n\n  console.log('Seeding files from directory ' + path.resolve(dir));\n  console.log('----------------------');\n\n  return Q.promise(function(resolve, reject, notify) {\n\n    var operations = [];\n\n    // Loop through every file in the list\n    list.forEach(function (file) {\n\n      // Set the filename without the extension to the variable collection_name\n      var collection_name = file.split(\".\")[0];\n      var contents = null;\n\n      // True if the current file has contents, false if it's empty\n      var hasContents = fs.statSync(path.resolve(dir + '/' + file)).size > 0;\n\n      console.log('Seeding collection ' + collection_name);\n\n      // If the file has contents, load them\n      if(hasContents) {\n        contents = require(dir + '/' + file);\n\n        // If the seed file is NOT an array\n        if (!util.isArray(contents)) {\n          return reject(new Error('Seed file ' + collection_name + ' does not start with an Array'));\n        }\n      }\n\n      // The chain of operations to occur for each file. Drop the existing collection if it exists, create it, insert data into it\n      var chain = dropCollection(db, collection_name).then(function() {\n        return createCollection(db, collection_name);\n      }).then(function() {\n        if(contents) {\n          return insert(db, collection_name, contents)\n        }\n      }).fail(function(err) {\n        return reject(errmsg(err));\n      });\n\n      // Push the chain for each file to an array of promises\n      operations.push(chain);\n    });\n\n    // When all the drop/create/inserts are complete, we're finished\n    Q.allSettled(operations).then(function() {\n      return resolve();\n    }).fail(function(err) {\n      return reject(err);\n    }).fin(function() {\n      db.close();\n    });\n  });\n}\n\n\n/**\n * Gets a connection to mongo\n *\n * @returns {promise|*|Q.promise}\n */\nfunction getConnection() {\n\n  return Q.promise(function(resolve, reject, notify) {\n\n    var NODE_ENV = process.env.NODE_ENV;\n    var connectionString = null;\n\n    // If NODE_ENV is set and there is no key in seed.json matching, throw an error\n    if(NODE_ENV && !config[NODE_ENV]) {\n      return reject('No key exists in seed.json for the passed in NODE_ENV');\n    }\n\n    // If the connection string does not start with \"mongodb://\", add it\n    if(_.startsWith(config[NODE_ENV], \"mongodb://\")) {\n      connectionString = config[NODE_ENV];\n    } else {\n      connectionString = 'mongodb://' + config[NODE_ENV];\n    }\n\n    mongo.connect(connectionString, function(err, db) {\n\n      if(err) {\n        return reject(err);\n      }\n\n      resolve(db);\n    });\n  });\n}\n\n\n/**\n * Creates a collection in mongo\n *\n * @param collection\n * @returns {*}\n */\nfunction createCollection(db, name) {\n\n  return Q.promise(function(resolve, reject, notify) {\n\n    db.createCollection(name, function(err, collection) {\n\n      if(err) {\n        return reject(err);\n      }\n\n      resolve();\n    });\n  });\n}\n\n\n/**\n * Drops a collection from mongo if it exists\n *\n * @param collection  - The collection to drop\n * @returns {*}\n */\nfunction dropCollection(db, name) {\n\n  return Q.promise(function(resolve, reject, notify) {\n\n    // Check if the collection exists, else don't do anything\n    collectionExist(db, name).then(function(exists) {\n\n      // If the collection exists, drop it\n      if(exists) {\n\n        db.dropCollection(name, function(err, reply) {\n\n          if(err) {\n            return reject(err);\n          }\n\n          resolve();\n        });\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\n\n/**\n * Checks if a collection exists\n *\n * @param db    - The db to check if a collection exists in\n * @param name  - The name of the collection we want to see if exists\n * @returns {promise|*|Q.promise}\n */\nfunction collectionExist(db, name) {\n\n  return Q.promise(function(resolve, reject, notify) {\n\n    db.listCollections().toArray(function(err, collections) {\n\n      if(err) {\n        return reject(err);\n      }\n\n      // If the collection exists in the mongo db\n      if(_.findWhere(collections, {name: name})) {\n        return resolve(true);\n      } else {\n        return resolve(false);\n      }\n    });\n  });\n}\n\n/**\n * Inserts an array of objects into mongo\n *\n * @param db              - The db to insert into\n * @param collection_name - The collection to insert into\n * @param contents        - The contents to be inserted\n * @returns {*}\n */\nfunction insert(db, collection_name, contents) {\n\n  return Q.promise(function(resolve, reject, notify) {\n\n    // If it's an empty array, there's nothing to insert\n    if(contents.length !== 0) {\n\n      var data = contents.map(function(content){\n        return json2mongo(content);\n      });\n\n      db.collection(collection_name).insertMany(data, function(err, result) {\n        if(err) {\n          return reject(err);\n        }\n\n        return resolve(result);\n      });\n    } else {\n      return resolve();\n    }\n  });\n}\n\n\n/**\n * Formats error messages to display the actual error message instead of all the errno codes and what not.\n *\n * @param err         - The error object that may or may not contain an errno code\n * @returns {string}  - A simple message\n */\nfunction errmsg(err) {\n\n  var str = 'Error: '\n  // if it's a libuv error then get the description from errno\n  if (errno.errno[err.errno]) {\n    str += errno.errno[err.errno].description\n  } else {\n    str += err.message\n  }\n\n  // if it's a `fs` error then it'll have a 'path' property\n  if (err.path) {\n    str += ' [' + err.path + ']'\n  }\n  return str\n}\n","/home/travis/build/npmtest/node-npmtest-node-mongo-seeds/node_modules/node-mongo-seeds/bin/seed":"#!/usr/bin/env node\n\nvar path = require('path');\nvar fs = require('fs');\nvar lib = path.join(path.dirname(fs.realpathSync(__filename)), '../lib');\n\nrequire(lib+'/seed.js').seed();","/home/travis/build/npmtest/node-npmtest-node-mongo-seeds/node_modules/node-mongo-seeds/lib/setup.js":"/**\n * This script creates a custom \".seed\" file where the user can specify\n *    the path to their mongo database.\n *\n * @author Tom Caflisch\n */\n\nvar fs = require('fs'); // Used to get all the files in a directory\nvar contents = '{\\n\\t\"undefined\": \"localhost/LOCAL_DB_NAME\",\\n\\t\"dev\": \"localhost/DEV_DB_NAME\",\\n\\t\"prod\": \"localhost/PROD_DB_NAME\"\\n}';\n\nmodule.exports.setup = function() {\n\n  // Create .seed file in the same directory where the user ran npm install from\n  fs.writeFile(process.cwd() + '/seed.json', contents, function (err) {\n    if (err) {\n      console.log(err);\n    }\n  });\n}"}